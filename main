#!/usr/bin/env python
# coding: utf-8




from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from time import sleep
from selenium.webdriver.common.keys import Keys
from bs4 import BeautifulSoup
import datetime
from datetime import date
import matplotlib.dates as mdates
import numpy as np  #20篇內
import matplotlib.pyplot as plt
from datetime import date

userdata=[]
driver=webdriver.Chrome()
driver.get("https://www.instagram.com/accounts/login/")  #get instagram的網站
WebDriverWait(driver,30,0.5).until(EC.presence_of_element_located((By.NAME,'username'))) #定位帳號密碼在的位置
usernaminput=driver.find_element_by_name("username")
passwordinput=driver.find_element_by_name("password")
a=input()  #使用者輸入
b=input()
account=a
usernaminput.send_keys(a)  
passwordinput.send_keys(b)
WebDriverWait(driver,30,0.5).until(EC.presence_of_element_located((By.XPATH,"//*[@id='loginForm']/div/div[3]/button/div")))
clickbotton=driver.find_element_by_xpath("//*[@id='loginForm']/div/div[3]/button/div")  #按下搜尋紐
clickbotton.click()
sleep(3)
wrong=driver.find_elements_by_xpath("//*[@id='slfErrorAlert']")
while wrong!=[]:#處理如果輸入的帳號不存在的情況(但如果是直接按enter會出現error，這邊還位處裡)
    print("您的帳號密碼不正確，請重新輸入!")
    usernaminput.send_keys(Keys.CONTROL+'a')  #帳號與密碼接清空，並重新輸入，直到帳密存在為止
    usernaminput.send_keys(Keys.DELETE)
    passwordinput.send_keys(Keys.CONTROL+'a')
    passwordinput.send_keys(Keys.DELETE)
    a=input()
    b=input()
    usernaminput.send_keys(a)
    passwordinput.send_keys(b)
    WebDriverWait(driver,30,0.5).until(EC.presence_of_element_located((By.XPATH,"//*[@id='loginForm']/div/div[3]/button/div")))
    clickbotton=driver.find_element_by_xpath("//*[@id='loginForm']/div/div[3]/button/div")
    clickbotton.click()
    WebDriverWait(driver,30,0.5).until(EC.presence_of_element_located((By.XPATH,"//*[@id='slfErrorAlert']")))
    wrong=driver.find_elements_by_xpath("//*[@id='slfErrorAlert']")
WebDriverWait(driver,30,0.5).until(EC.presence_of_element_located((By.XPATH,'//*[@id="react-root"]/section/main/div/div/div/div/button')))
z=driver.find_element_by_xpath('//*[@id="react-root"]/section/main/div/div/div/div/button')
z.click()  #選擇稍後儲存帳密
WebDriverWait(driver,40,0.5).until(EC.presence_of_element_located((By.XPATH,"/html/body/div[4]/div/div/div/div[3]/button[2]")))
k=driver.find_element_by_xpath("/html/body/div[4]/div/div/div/div[3]/button[2]")
k.click()  #開啟通知的稍後在說"_6q-tv"
WebDriverWait(driver,30,0.5).until(EC.presence_of_element_located((By.XPATH,"//*[@id='react-root']/section/nav/div[2]/div/div/div[3]/div/div[5]/span")))
personal=driver.find_element_by_xpath("//*[@id='react-root']/section/nav/div[2]/div/div/div[3]/div/div[5]/span")
personal.click()
WebDriverWait(driver,30,0.5).until(EC.presence_of_element_located((By.XPATH,"//*[@id='react-root']/section/nav/div[2]/div/div/div[3]/div/div[5]/div[2]/div[2]/div[2]/a[1]")))
connect=driver.find_element_by_xpath("//*[@id='react-root']/section/nav/div[2]/div/div/div[3]/div/div[5]/div[2]/div[2]/div[2]/a[1]")
connect.click()
sleep(3)
soup = BeautifulSoup(driver.page_source, 'html.parser') 
j=soup.find('li').text #總貼文數  #正確的後半段
f=j.split(' ')
fans=soup.findAll('li')[1].text#追蹤者的人數
g=fans.split(' ')

weeklike={}
k=driver.find_elements_by_css_selector("a[tabindex='0']")[7] #第一章
k.click() #點進第一張
weeklike={1:0,2:0,3:0,4:0,5:0,6:0,7:0}  #存總數
weektimes={1:0,2:0,3:0,4:0,5:0,6:0,7:0}  #存次數
times=[[],[],[],[],[],[],[]]
timeslike=[[],[],[],[],[],[],[]]
posts=int(f[0])
if posts>25:
    k=26
else:
    k=posts #小於25篇
for i in range(1,k):
    sleep(1)
    soup = BeautifulSoup(driver.page_source, 'html.parser')  #用soup做解讀
    j=soup.select('a[class="zV_Nj"][tabindex="0"]') #抓出第照片的讚數(如果按讚數低於兩人，則index要是0)
    sleep(1)
    f=soup.find('time',{'class':"_1o9PC Nzb55"}).get('datetime')
    if len(j)>1:  #讚數高於兩人
        j=j[1].text
        like=j.split(' ')
        likes=int(like[1])+1
    else: #解決讚數低於2人
        if j==[]:
            print(0)
        else:
            j=j[0].text
            like=j.split(' ')
            likes=int(like[0])
    get=f[:10] #取得日期2021-09-09
    tme=f[11:16] #取得時間
    week0=date.fromisoformat(get)
    week=week0.weekday()+1 #注意weekday()返回的是0~6是星期一到星期日
    weeklike[week]+=likes
    weektimes[week]+=1
    times[week-1].append(tme)#每天p0文的時段
    timeslike[week-1].append(likes)
    if i==10:
        weeklike10=weeklike.copy()
        weektimes10=weektimes.copy()
    WebDriverWait(driver,30,0.5).until(EC.presence_of_element_located((By.XPATH,"/html/body/div[5]/div[1]/div/div/a")))
    if i==1:
        a=driver.find_element_by_xpath("/html/body/div[5]/div[1]/div/div/a").click()
    else:
        a=driver.find_elements_by_xpath("/html/body/div[5]/div[1]/div/div/a")[1].click()

for i in weeklike:
    if weektimes[i]!=0:
        weektimes[i]=weeklike[i]//weektimes[i]
if posts>10: #前10篇
    for i in weeklike10:
        if weektimes10[i]!=0:
            weektimes10[i]=weeklike10[i]//weektimes10[i]
    weeks=list(weektimes10.keys())
    likes=list(weektimes10.values())
    x = np.arange(7)
    plt.bar(x,likes)
    plt.xticks(x,weeks)
    plt.xlabel('week')
    plt.ylabel('like')
    plt.title('distribution of the latest 10 posts')
    plt.show()
    
weeks=list(weektimes.keys())
likes=list(weektimes.values())
x = np.arange(7)
plt.bar(x,likes)
plt.xticks(x,weeks)
plt.xlabel('week')
plt.ylabel('like')
plt.title('distribution of the latest %s posts'%(posts))
plt.show()

print()
dict1={1:'Monday',2:"Tuesday",3:'Wednesday',4:'Thursday',5:'Friday',6:'Saturday',7:'Sunday'}
def ttka(a): #時間
    j=a.split(':')
    ans=int(j[0])*60+int(j[1])
    return ans
from datetime import datetime
for i in range(0,len(times)):
    if times[i]!=[]:
        tim=times[i]
        timlike=timeslike[i]
        h=sorted(tim,key=ttka)
        j=[tim.index(k) for k in h]
        y=[timlike[u] for u in j]
        x=[datetime.strptime(d, '%H:%M') for d in h]
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
        plt.gca().xaxis.set_major_locator(mdates.HourLocator(interval=2))
        plt.plot(x,y,"o-")
        plt.title(dict1[i+1])
        plt.show()
        f=timeslike[i].index(max(timeslike[i]))
        print('the best time to post on'+" "+dict1[i+1]+' is '+tim[f])




times=[[], ['11:50', '09:37'], ['13:39', '14:41'], ['12:19', '16:18', '23:31'], [], ['10:16'], ['14:22', '11:00', '14:43', '12:28']]
timeslike=[[], [37, 43], [51, 45], [41, 50, 65], [], [57], [54, 64, 45, 19]]
def ttka(a): #時間
    j=a.split(':')
    ans=int(j[0])*60+int(j[1])
    return ans
from datetime import datetime
for i in range(0,len(times)):
    if len(times[i])>1:
        tim=times[i]
        print(tim)
        timlike=timeslike[i]
        h=sorted(tim,key=ttka)
        print(h)
        j=[tim.index(k) for k in h]
        y=[timlike[u] for u in j]
        x=[datetime.strptime(d, '%H:%M') for d in h]
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
        plt.gca().xaxis.set_major_locator(mdates.HourLocator(interval=1))
        plt.plot(x,y,"o-")
        plt.title(dict1[i+1])
        plt.show()
        f=timeslike[i].index(max(timeslike[i]))
        print('the best time to post on'+" "+dict1[i+1]+' is '+tim[f])






